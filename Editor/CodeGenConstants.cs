namespace LotW.CherryUI.Editor
{
    public static class CodeGenConstants
    {
        public const string FilenameEnd = ".Generated.cs";
        public const string BasePath = "Assets/Scripts";
        public const string ModelsPath = "DataModels/Generated";

        public const string TemplateSuffix = "Template";
        public const string ModelSuffix = "Model";
        
        public const string TemplateNamespace = "LotW.DataModels.Templates";
        
        public const string TemplateNamePlaceholder = "##TEMPLATE##";
        public const string ModelNamePlaceholder = "##MODEL##";
        public const string MemberNamePlaceholder = "##MEMBER##";
        public const string ConstructorPlaceholder = "##CTOR##";
        public const string PropsPlaceholder = "##PROPS##";
        public const string TypePlaceholder = "##TYPE##";

        public static readonly string ModelTemplate = $@"
// <auto-generated/>
// Do not modify by hand!
// To update this file, use ""Tools -> UnityCodeGen -> Generate"" main menu item

using System;
using Newtonsoft.Json;
using CherryUI.DataModels;
using {TemplateNamespace};

namespace LotW.DataModels
{{
    [Serializable]
    public class {ModelNamePlaceholder} : DataModelBase
    {{
        private {TemplateNamePlaceholder} _template = new();
        
        public {ModelNamePlaceholder}() : base()
        {{
{ConstructorPlaceholder}
        }}
        
        // ReSharper disable InconsistentNaming
{PropsPlaceholder}
        // ReSharper restore InconsistentNaming
    }}
}}
";
        public static readonly string PropertyTemplate = $@"
        public {TypePlaceholder} {MemberNamePlaceholder}
        {{
            get => _template.{MemberNamePlaceholder};
            set {{ _template.{MemberNamePlaceholder} = value; SendDownward<{TypePlaceholder}>(nameof({MemberNamePlaceholder}), value); }}
        }}
                
        public Accessor<{TypePlaceholder}> {MemberNamePlaceholder}Accessor;
";
    }
}